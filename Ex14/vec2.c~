#include <stdio.h>
#include <math.h>
#include <omp.h>
#include <immintrin.h>

#define N 200000000

extern int my_GetRand(void);
extern void my_srand(void);


int main(){
  int i;
  int num_chunk, vec_size = sizeof(__m256)/sizeof(float);
  double st,et;

  float *a,*b,*c, *c_orig;
  __m256 vec_a,vec_b,vec_c;

  my_srand();

  a = (float *)_mm_malloc(sizeof(float)*N,32);
  b = (float *)_mm_malloc(sizeof(float)*N,32);
  c = (float *)_mm_malloc(sizeof(float)*N,32);
  c_orig = (float *)_mm_malloc(sizeof(float)*N,32);
  for(i=0;i<N;i++){
    a[i] = (float)my_GetRand()/214748364;
    b[i] = (float)my_GetRand()/214748364;
  }


  st = omp_get_wtime();

  num_check = N/vec_size;

  // ベクトル演算 //
  for(i=0;i<num_chunk;i++){
    vec_a = _mm256_load_ps(a+vec_size*i);
    vec_b = _mm256_load_ps(b+vec_size*i);
    vec_c = _mm256_mul_ps(vec_a, vec_b);
    _mm256_store_ps(c+vec_size*i, vec_c);
  }
  // ベクトル演算ここまで //

  et = omp_get_wtime();
  printf("[AVX] elapsed time: %f sec.\n",et-st);


  st = omp_get_wtime();
  for(i=0;i<N;i++){
    c_orig[i]= a[i]*b[i];
  }
  et = omp_get_wtime();
  printf("[original] elapsed time: %f sec.\n",et-st);

  printf("[Error check]\n");
  for(i=0;i<N;i++) if(fabs(c[i]-c_orig[i]) > 1.0E-6) break;

  if(i==N)printf("\nCongratulations! No errors were found!\n");
  else printf("\nUnfortunately, your program is something wrong.\n");


  _mm_free(a);
  _mm_free(b);
  _mm_free(c);
  _mm_free(c_orig);

  return 0;
}
